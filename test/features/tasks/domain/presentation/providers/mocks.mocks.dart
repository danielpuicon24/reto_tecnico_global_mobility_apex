// Mocks generated by Mockito 5.4.6 from annotations
// in reto_tecnico_apex/test/features/tasks/domain/presentation/providers/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:reto_tecnico_apex/feature/tasks/domain/entities/task.dart'
    as _i5;
import 'package:reto_tecnico_apex/feature/tasks/domain/repositories/task_repository.dart'
    as _i2;
import 'package:reto_tecnico_apex/feature/tasks/domain/usecases/completed_task_usecase.dart'
    as _i9;
import 'package:reto_tecnico_apex/feature/tasks/domain/usecases/deleted_task_usecase.dart'
    as _i8;
import 'package:reto_tecnico_apex/feature/tasks/domain/usecases/get_all_tasks_usecase.dart'
    as _i3;
import 'package:reto_tecnico_apex/feature/tasks/domain/usecases/save_task_usecase.dart'
    as _i6;
import 'package:reto_tecnico_apex/feature/tasks/domain/usecases/update_task_usecase.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRepository_0 extends _i1.SmartFake
    implements _i2.TaskRepository {
  _FakeTaskRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasksUseCase extends _i1.Mock
    implements _i3.GetAllTasksUseCase {
  MockGetAllTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i4.Future<List<_i5.Task>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);
}

/// A class which mocks [SaveTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTaskUseCase extends _i1.Mock implements _i6.SaveTaskUseCase {
  MockSaveTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i4.Future<void> call(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i7.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i4.Future<void> call(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeletedTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeletedTaskUseCase extends _i1.Mock
    implements _i8.DeletedTaskUseCase {
  MockDeletedTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i4.Future<void> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [CompleteTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteTaskUseCase extends _i1.Mock
    implements _i9.CompleteTaskUseCase {
  MockCompleteTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTaskRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.TaskRepository);

  @override
  _i4.Future<void> call(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
